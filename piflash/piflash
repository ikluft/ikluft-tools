#!/usr/bin/perl
# piflash.pl - flash a Raspberry Pi image to an SD card, with safety checks to avoid erasing wrong device
# by Ian Kluft
#
# This script uses sudo to perform root-privileged functions.
use strict;
use warnings;
use 5.018; # require 2014 or newer version of Perl
use autodie; # report errors instead of silently continuing ("die" actions are used as exceptions - caught & reported)
use Carp;
use Getopt::Long; # included with perl
use POSIX; # included with perl
use IO::Handle; # rpm: "dnf install perl-IO", deb: included with perl
use IO::Poll qw(POLLIN POLLHUP); # same as IO::Handle
use File::Basename; # included with perl
use File::LibMagic; # rpm: "dnf install perl-File-LibMagic", deb: "apt-get install libfile-libmagic-perl"

=head1 NAME

piflash - Raspberry Pi SD-flashing script with safety checks to avoid erasing the wrong device

=head1 SYNOPSIS

 piflash [--verbose] input-file output-device

 piflash [--verbose] --SDsearch

=head1 DESCRIPTION

This script flashes an SD card for a Raspberry Pi. It includes safety checks so that it can only erase and write to an SD card, not another device on the system. The safety checks are probably of most use to beginners. For more advanced users (like the author) it also has the convenience of flashing directly from the file formats downloadable from raspberrypi.org without extracting a .img file from a zip/gz/xz file.

=over 1

=item *
The optional parameter --verbose makes much more verbose status and error messages.  Use this when troubleshooting any problem or preparing program output to ask for help or report a bug.

=item *
input-file is the path of the binary image file used as input for flashing the SD card. If it's a .img file then it will be flashed directly. If it's a gzip (.gz), xz (.xz) or zip (.zip) file then the .img file will be extracted from it to flash the SD card. It is not necessary to unpack the file if it's in one of these formats. This covers most of the images downloadable from the Raspberry Pi foundation's web site.

=item *
output-file is the path to the block device where the SSD card is located. The device should not be mounted - if it ismounted the script will detect it and exit with an error. This operation will erase the SD card and write the new image from the input-file to it. (So make sure it's an SD card you're willing to have erased.)

=item *
The --SDsearch parameter tells piflash to print a list of device names for SD cards available on the system and then exit. Do not specify an input file or output device when using this option - it will exit before they would be used.

=back

=head2 Safety Checks

The program makes a number of safety checks for you. Since the SD card flashing process may need root permissions, these are considered prudent precautions.

=over 1

=item *
The input file's format will be checked. If it ends in .img then it will be flashed directly as a binary image file. If it ends in .xz, .gzip or .zip, it will extract the binary image from the file. If the filename doesn't have a suffix, libmagic will be used to inspect the contents of the file (for "magic numbers") to determine its format.

=item *
The output device must be a block device.

=item *
If the output device is a mounted filesystem, it will refuse to erase it.

=item *
If the output device is not an SD card, it will refuse to erase it.
Piflash has been tested with USB and PCI based SD card interfaces.

=back

=head2 Automated Flashing Procedure

Piflash automates the process of flashing an SD card from various Raspberry Pi OS images.

=over 1

=item *
For most disk images, either in a raw *.img file, compressed in a *.gz or *.xz file, or included in a *.zip archive, piflash recognizes the file format and extracts the disk image for flashing, eliminating the step of uncompressing or unarchiving it before it can be flashed to the SD.

=item *
For zip archives, it checks if it contains the Raspberry Pi NOOBS (New Out Of the Box System), in which case it handles it differently. The steps it takes are similar to the instructions that one would have to follow manually.  It formats a new VFAT filesystem on the card. (FAT/VFAT is the only format recognized by the Raspberry Pi's simple boot loader.) Then it copies the contents of the zip archive into the card, automating the entire flashing process even for a NOOBS system, which previously didn't even have instructions to be done from Linux systems.

=back

=head1 INSTALLATION

The piflash script only works on Linux systems. It depends on features of the Linux kernel to look up whether the output device is an SD card and other information about it. It has been tested so far on Fedora 25, and some experimentation with Ubuntu 16.04 (in a virtual machine) to get the kernel parameters right for a USB SD card reader.

=head2 System Dependencies

Some programs and libraries must be installed on the system for piflash to work - most packages have such dependencies.

On RPM-based Linux systems (Red Hat, Fedora, CentOS) the following command, run as root, will install the dependencies.

	dnf install coreutils util-linux sudo perl file-libs perl-File-LibMagic perl-IO gzip unzip xz e2fsprogs dosfstools

On Deb-based Linux systems (Debian, Ubuntu, Raspbian) the following command, run as root, will install the dependencies.

	apt-get install coreutils util-linux klibc-utils sudo perl-base libmagic1 libfile-libmagic-perl gzip xz-utils e2fsprogs dosfstools

On source-based or other Linux distributions, make sure the following are installed:

=over 1

=item programs:
blockdev, dd, echo, gunzip, lsblk, mkdir, mkfs.vfat, mount, perl, sfdisk, sudo, sync, true, umount, unzip, xz

=item libraries:
libmagic/file-libs, File::LibMagic (perl)

=back

=head2 Piflash script

The piflash script can be downloaded with either of these commands.

	curl -L https://github.com/ikluft/ikluft-tools/raw/master/piflash/piflash > piflash

or

	wget https://github.com/ikluft/ikluft-tools/raw/master/piflash/piflash

=head2 Bug reporting

Report bugs via GitHub at https://github.com/ikluft/ikluft-tools/issues - this location may eventually change
if piflash becomes popular enough to warrant having its own source code repository.

When reporting a bug, please include the full output using the --verbose option. That will include all of the
program's state information, which will help understand the bigger picture what was happening on your system.
Feel free to remove information you don't want to post in a publicly-visible bug report - though it's helpful
to add "[redacted]" where you removed something so it's clear what happened.

For any SD card reader hardware which piflash fails to recognize (and therefore refuses to write to),
please describe the hardware as best you can including name, product number, bus (USB, PCI, etc),
any known controller chips.

=cut

#
# global variables
#

# recognized file suffixes which SD cards can be flashed from
my @known_suffixes = qw(gz zip xz img);

# block device parameters to collect via lsblk
my @blkdev_params = ( "MOUNTPOINT", "FSTYPE", "SIZE", "SUBSYSTEMS", "TYPE", "MODEL", "RO", "RM", "HOTPLUG", "PHY-SEC");

# State class to hold program state, and print it all out in case of errors
# this is a low-level package - it stores state data but at this level has no knowledge of what is being stored in it
package State
{
	# initialize state as empty
	## no critic (ProhibitPackageVars)
	BEGIN { $State::state = undef; }
	## use critic

	# initialize class' singleton object from parameters
	# class method
	sub init
	{
		## no critic (ProhibitPackageVars)
		my $class = shift;
		(defined $State::state) and return; # don't damage data if called again
		$State::state = {};
		bless $State::state, $class;
		my $self = $State::state;
		while (scalar @_ > 0) {
			my $top_level_param = shift;

			# create top-level hash named for the parameter
			$self->{$top_level_param} = {};

			# generate class accessor methods named for the parameter
			{
				# get symbol table for State package so we can add accessor functions named for top-level hashes
				my $symtab = \%State::;

				# accessor fieldname()
				$symtab->{$top_level_param} = sub {
					my $name = shift;
					my $value = shift;
					if (defined $value) {
						# got name & value - set the new value for name
						$self->{$top_level_param}{$name} = $value;
					} elsif (defined $name) {
						# got only name - return the value/ref of name
						return (exists $self->{$top_level_param}{$name})
							? $self->{$top_level_param}{$name}
							: undef;
					} else {
						# no name or value - return ref to top-level hash (top_level_parameter from init() context)
						return $self->{$top_level_param};
					}
				};

				# accessor has_fieldname()
				$symtab->{"has_".$top_level_param} = sub {
					my $name = shift;
					return ((exists $self->{$top_level_param}) and (exists $self->{$top_level_param}{$name}));
				}
			}
		}
		return;
	}

	# dump data structure recursively, part of verbose state output
	# intended as a lightweight equivalent of Data::Dumper without requiring installation of an extra package
	# object method
	sub odump
	{
		my ($obj, $level) = @_;
		if (!defined $obj) {
			# bail out for undefined value
			return "";
		}
		if (!ref $obj) {
			# process plain scalar
			return ("    " x $level)."[value]".$obj."\n";
		}
		if (ref $obj eq "SCALAR") {
			# process scalar reference
			return ("    " x $level).($$obj // "undef")."\n";
		}
		if (ref $obj eq "HASH" or ref $obj eq "State") {
			# process hash reference
			my $str = "";
			foreach my $key (sort {lc $a cmp lc $b} keys %$obj) {
				if (ref $obj->{$key}) {
					$str .= ("    " x $level)."$key:"."\n";
					$str .= odump($obj->{$key}, $level+1);
				} else {
					$str .= ("    " x $level)."$key: ".($obj->{$key} // "undef")."\n";
				}
			}
			return $str;
		}
		if (ref $obj eq "ARRAY") {
			# process array reference
			my $str = "";
			foreach my $entry (@$obj) {
				if (ref $entry) {
					$str .= odump($entry, $level+1);
				} else {
					$str .= ("    " x $level)."$entry\n";
				}
			}
			return $str;
		}
		if (ref $obj eq "CODE") {
			# process function reference
			return ("    " x $level)."[function]$obj"."\n";
		}
		# other references/unknown type
		my $type = ref $obj;
		return ("    " x $level)."[$type]$obj"."\n";
	}

	# die/exception with verbose state dump
	# class method
	sub error
	{
		## no critic (ProhibitPackageVars)
		my $class = shift;
		my $message = shift;
		Carp::croak "error: ".$message.(main::verbose() ? "\nProgram state dump...\n".odump($State::state,0) : "");
	}
}

# return boolean value for verbose mode
sub verbose
{
	return State::option("verbose") // 0;
}

# print program usage message
sub usage
{
	say STDERR "usage: ".base($0)." [--verbose] input-file output-device";
	say STDERR "       ".base($0)." [--verbose] --SDsearch";
	exit 1;
}

# fork wrapper function
# borrowed from Aaron Crane's YAPC::EU 2009 presentation slides online
sub fork_child {
    my ($child_process_code) = @_;

	# fork and catch errors
    my $pid = fork;
	if (!defined $pid) {
		State->error("Failed to fork: $!\n");
	}

	# if in parent process, return child pid
	if ($pid != 0) {
		return $pid;
	}

    # if in child process, run requested code
    $child_process_code->();

	# if we got here, child code returned - so exit to end the subprocess
    exit;
}

# fork/exec wrapper to run child processes and collect output/error results
# used as lower level call by cmd() and cmd2str()
# this would be a lot simpler with qx()/backtick/system - but wrapper lets us send input & capture output/error data
sub fork_exec
{
	# input for child process may be provided as reference to array - use it and remove it from parameters
	my @input;
	if ( ref $_[0] eq "ARRAY" ) {
		my $input_ref = shift;
		@input = @$input_ref;
	}
	my $cmdname = shift;
	my @args = @_;

	# open pipes for child process stdin, stdout, stderr
	my ($child_in_reader, $child_in_writer, $child_out_reader, $child_out_writer,
		$child_err_reader, $child_err_writer);
	pipe $child_in_reader, $child_in_writer
		or State->error("fork_exec($cmdname): failed to open child process input pipe: $!");
	pipe $child_out_reader, $child_out_writer
		or State->error("fork_exec($cmdname): failed to open child process output pipe: $!");
	pipe $child_err_reader, $child_err_writer
		or State->error("fork_exec($cmdname): failed to open child process error pipe: $!");

	# fork the child process
	my $pid = fork_child(sub {
		# in child process

		# close our copy of parent's end of pipes to avoid deadlock - it must now be only one with them open
		close $child_in_writer
			or Carp::croak "fork_exec($cmdname): child failed to close parent process input writer pipe: $!";
		close $child_out_reader
			or Carp::croak "fork_exec($cmdname): child failed to close parent process output reader pipe: $!";
		close $child_err_reader
			or Carp::croak "fork_exec($cmdname): child failed to close parent process error reader pipe: $!";

		# dup file descriptors into child's standard in=0/out=1/err=2 positions
		POSIX::dup2(fileno $child_in_reader, 0)
			or Carp::croak "fork_exec($cmdname): child failed to reopen stdin from pipe: $!\n";
		POSIX::dup2(fileno $child_out_writer, 1)
			or Carp::croak "fork_exec($cmdname): child failed to reopen stdout to pipe: $!\n";
		POSIX::dup2(fileno $child_err_writer, 2)
			or Carp::croak "fork_exec($cmdname): child failed to reopen stderr to pipe: $!\n";

		# close the file descriptors that were just consumed by dup2
		close $child_in_reader
			or Carp::croak "fork_exec($cmdname): child failed to close child process input reader pipe: $!";
		close $child_out_writer
			or Carp::croak "fork_exec($cmdname): child failed to close child process output writer pipe: $!";
		close $child_err_writer
			or Carp::croak "fork_exec($cmdname): child failed to close child process error writer pipe: $!";

		# execute the command
		exec @args
			or Carp::croak "fork_exec($cmdname): failed to execute command - returned $?";
	});

	# in parent process

	# close our copy of child's end of pipes to avoid deadlock - it must now be only one with them open
	close $child_in_reader
		or State->error("fork_exec($cmdname): parent failed to close child process input reader pipe: $!");
	close $child_out_writer
		or State->error("fork_exec($cmdname): parent failed to close child process output writer pipe: $!");
	close $child_err_writer
		or State->error("fork_exec($cmdname): parent failed to close child process error writer pipe: $!");

	# write to child's input if any content was provided
	if (@input) {
		# blocks until input is accepted - it is required that all commands using input take it before output
		if (syswrite($child_in_writer, join("\n", @input)."\n") == undef) {
			State->error("fork_exec($cmdname): failed to write child process input: $!");
		}
	}
	close $child_in_writer;

	# use IO::Poll to collect child output and error separately
	my @fd = ($child_out_reader, $child_err_reader); # file descriptors for out(0) and err(1)
	my @text = (undef, undef); # received text for out(0) and err(1)
	my @done = (0, 0); # done flags for out(0) and err(1)
	my $poll = IO::Poll->new();
	$poll->mask($child_out_reader => POLLIN);
	$poll->mask($child_err_reader => POLLIN);
	while ((!$done[0]) or (!$done[1])) {
		# wait for input
		if ($poll->poll() == -1) {
			State->error("fork_exec($cmdname): poll failed: $!");
		}
		for (my $i=0; $i<=1; $i++) {
			if (!$done[$i]) {
				my $events = $poll->events($fd[$i]);
				if ($events && (POLLIN || POLLHUP)) {
					# read all available input for input or hangup events
					# we do this for hangup because Linux kernel doesn't report input when a hangup occurs
					my $buffer;
					while (sysread($fd[$i], $buffer, 1024) != 0) {
						if (!defined $text[$i]) {
							$text[$i] = "";
						}
						$text[$i] .= $buffer;
					}
				}
				if ($events && (POLLHUP)) {
					# hangup event means this fd (out=0, err=1) was closed by the child
					$done[$i] = 1;
					$poll->remove($fd[$i]);
				}
			}
		}
	}

	# reap the child process status
	waitpid( $pid, 0 );

	# record all command return codes, stdout & stderr in a new top-level store in State
	# it's overhead but could be useful for problem-reporting, troubleshooting, debugging and testing
	if (verbose()) {
		my $log = State::log();
		if (!exists $log->{cmd}) {
			$log->{cmd} = [];
		}
		push @{$log->{cmd}}, {
			cmdname => $cmdname,
			cmdline => [@args],
			returncode => $? >> 8,
			(($? & 127) ? (signal => sprintf "signal %d%s", ($? & 127), (($? & 128) ? " with coredump" : "")) : ()),
			out => $text[0],
			err => $text[1],
		};
	}

	# catch errors
	if ($? == -1) {
		State->error("failed to execute $cmdname command: $!");
	} elsif ($? & 127) {
		State->error(sprintf "%s command died with signal %d, %s coredump",
			$cmdname, ($? & 127),  ($? & 128) ? 'with' : 'without');
	} elsif ($? != 0) {
		State->error(sprintf "%s command exited with value %d", $cmdname, $? >> 8);
	}

	# return output/error
	return @text;
}

# run a command
# usage: run( label, command_line)
#   label: a descriptive name of the action this is performing
#   command_line: shell command line (pipes and other shell metacharacters allowed)
# note: if there are no shell special characters then all command-line parameters need to be passed separately.
# If there are shell special characters then it will be given to the shell for parsing.
sub cmd
{
	my $cmdname = shift;
	if (verbose()) {
		say STDERR "running: ".join(" ", @_);
	}
	system (@_);
	if ($? == -1) {
		State->error("failed to execute $cmdname command: $!");
	} elsif ($? & 127) {
		State->error(sprintf "%s command died with signal %d, %s coredump",
			$cmdname, ($? & 127),  ($? & 128) ? 'with' : 'without');
	} elsif ($? != 0) {
		State->error(sprintf "%s command exited with value %d", $cmdname, $? >> 8);
	}
	return 1;
}

# run a command and return the output as a string
# This originally used qx() to fork child process and obtain output.  But Perl::Critic discourages use of qx/backtick.
# And it would be useful to provide input to child process, rather than using a wasteful echo-to-pipe shell command.
# So the fork_exec_wrapper() was added as a lower-level base for cmd() and cmd2str().
sub cmd2str
{
	#my $cmd = join(" ", @_);
	#return qx($cmd);
	my $cmdname = shift;
	my ($out, $err) = fork_exec($cmdname, @_);
	if (defined $err) {
		Carp::carp("$cmdname had error output:\n".$err);
	}
	return wantarray ? split /\n/, $out : $out;
}

# look up secure program path
sub prog
{
	my $progname = shift;
	my $prog = State::system("prog");
	if (exists $prog->{$progname}) {
		return $prog->{$progname};
	}

	# if we didn't have the location of the program, look for it and cache the result
	if (exists $ENV{uc $progname."_PROG"} and -x $ENV{uc $progname."_PROG"}) {
		$prog->{$progname} = $ENV{uc $progname."_PROG"};
		return $prog->{$progname};
	}

	# search paths in order emphasizing recent Linux Filesystem that prefers /usr/bin, then Unix PATH order
	for my $path ("/usr/bin", "/sbin", "/usr/sbin", "/bin") {
		if (-x "$path/$progname") {
			$prog->{$progname} = "$path/$progname";
			return $prog->{$progname};
		}
	}

	# if we get here, we didn't find a known secure location for the program
	State->error("unknown secure location for $progname - install it or set "
			.(uc $progname."_PROG")." to point to it");
}

# base function: get basename from a file path
sub base
{
	my $path = shift;
	my $filename = File::Basename::fileparse($path, ());
	return $filename;
}

# slurp function: get file contents into a string
sub slurp
{
	my $filename = shift;
	open my $fh, "<", $filename;
	my $str = do {
		## no critic (RequireInitializationForLocalVars)
		local $/; # avoid interference from functions which modify global $/
		<$fh>
	};
	close $fh;
	if (wantarray) {
		my @str = split /^/, $str;
		chomp @str;
		return @str;
	}
	chomp $str;
	return $str;
}

# collect data about the system: kernel specs, program locations
sub collect_system_info
{
	my $system = State::system();

	# Make sure we're on a Linux system - this program uses Linux-only features
	($system->{sysname}, $system->{nodename}, $system->{release}, $system->{version},
		$system->{machine}) = POSIX::uname();
	if ($system->{sysname} ne "Linux") {
		State->error("This depends on features of Linux. Found $system->{sysname} kernel - cannot continue.");
	}

	# hard-code known-secure locations of programs here if you need to override any on your system
	# $prog{name} = "/path/to/name";

	# loop through needed programs and record locations from environment variable or system directories
	$system->{prog} = {};

	# set PATH in environment as a precaution - we don't intend to use it but mkfs does
	# search paths in standard Unix PATH order
	my @path;
	for my $path ("/sbin", "/usr/sbin", "/bin", "/usr/bin") {
		# include in PATH standard Unix directories which exist on this system
		if (-d $path) {
			push @path, $path;
		}
	}
	## no critic (RequireLocalizedPunctuationVars])
	$ENV{PATH} = join ":", @path;
	## use critic
	$system->{PATH} = $ENV{PATH};

	# find filesystems supported by this kernel (for formatting SD card)
	my %fs_pref = (vfat => 1, ext4 => 2, ext3 => 3, ext2 => 4, exfat => 5, other => 6); # fs preference order
	my @filesystems = grep {! /^nodev\s/} slurp("/proc/filesystems");
	for (my $i=0; $i<=$#filesystems; $i++) {
		# remove leading and trailing whitespace;
		$filesystems[$i] =~ s/^\s*//;
		$filesystems[$i] =~ s/\s*$//;
	}
	# sort list by decreasing preference (increasing numbers)
	$system->{filesystems} = [ sort {($fs_pref{$a} // $fs_pref{other})
		<=> ($fs_pref{$b} // $fs_pref{other})} @filesystems ];
	$system->{primary_fs} = $system->{filesystems}[0];

	# find locations where we can put mount points
	foreach my $dir ( qw(/run/media /media /mnt) ) {
		if ( -d $dir ) {
			State::system("media_dir", $dir); # use the first one
			last;
		}
	}
}

# collect input file info
# verify existence, deduce file type from contents, get size, check for raw filesystem image or NOOBS archive
sub collect_file_info
{
	my $input = State::input();

	# verify input file exists
	if (! -e $input->{path}) {
		State->error("input ".$input->{path}." does not exist");
	}
	if (! -f $input->{path}) {
		State->error("input ".$input->{path}." is not a regular file");
	}

	# use libmagic/file to collect file data
	# it is collected even if type will be determined by suffix so we can later inspect data further
	{
		my $magic = File::LibMagic->new();
		$input->{info} = $magic->info_from_filename($input->{path});
		if ($input->{info}{mime_type} eq "application/gzip"
			or $input->{info}{mime_type} eq "application/x-xz")
		{
			my $uncompress_magic = File::LibMagic->new(uncompress => 1);
			$input->{info}{uncompress} = $uncompress_magic->info_from_filename($input->{path});
		}
	}

	# parse the file name
	$input->{parse} = {};
	($input->{parse}{name}, $input->{parse}{path}, $input->{parse}{suffix})
		= fileparse($input->{path}, map {".".$_} @known_suffixes);

	# use libmagic/file to determine file type from contents
	say "input file is a ".$input->{info}{description};
	if ($input->{info}{description} =~ /^Zip archive data/i) {
		$input->{type} = "zip";
	} elsif ($input->{info}{description} =~ /^gzip compressed data/i) {
		$input->{type} = "gz";
	} elsif ($input->{info}{description} =~ /^XZ compressed data/i) {
		$input->{type} = "xz";
	} elsif ($input->{info}{description} =~ /^DOS\/MBR boot sector/i) {
		$input->{type} = "img";
	}
	if (!exists $input->{type}) {
		State->error("collect_file_info(): file type not recognized on $input->{path}");
	}

	# get file size - start with raw file size, update later if it's compressed/archive
	$input->{size} = -s $input->{path};

	# find embedded image in archived/compressed files (either *.img or a NOOBS image)
	if ($input->{type} eq "zip") {
		# process zip archives
		my @zip_content = cmd2str("unzip - list contents", prog("unzip"), "-l", $input->{path});
		chomp @zip_content;
		my $found_build_data = 0;
		my @imgfiles;
		my $zip_lastline = pop @zip_content; # last line contains total size
		$zip_lastline =~ /^\s*(\d+)/;
		$input->{size} = $1;
		foreach my $zc_entry (@zip_content) {
			if ($zc_entry =~ /\sBUILD-DATA$/) {
				$found_build_data = 1;
			} elsif ($zc_entry =~ /^\s*(\d+)\s.*\s([^\s]*)$/) {
				push @imgfiles, [$2, $1];
			}
		}

		# detect if the zip archive contains Raspberry Pi NOOBS (New Out Of the Box System)
		if ($found_build_data) {
			my @noobs_version = grep {/^NOOBS Version:/} cmd2str("unzip - check for NOOBS", prog("unzip"),
				"-p", $input->{path}, "BUILD-DATA");
			chomp @noobs_version;
			if (scalar @noobs_version > 0) {
				if ($noobs_version[0] =~ /^NOOBS Version: (.*)/) {
					$input->{NOOBS} = $1;
				}
			}
		}

		# if NOOBS system was not found, look for a *.img file
		if (!exists $input->{NOOBS}) {
			if (scalar @imgfiles == 0) {
				State->error("input file is a zip archive but does not contain a *.img file or NOOBS system");
			}
			$input->{imgfile} = $imgfiles[0][0];
			$input->{size} = $imgfiles[0][1];
		}
	} elsif ($input->{type} eq "gz") {
		# process gzip compressed files
		my @gunzip_out = cmd2str("gunzip - list contents", prog("gunzip"), "--list", "--quiet", $input->{path});
		chomp @gunzip_out;
		$gunzip_out[0] =~ /^\s+\d+\s+(\d+)\s+[\d.]+%\s+(.*)/;
		$input->{size} = $1;
		$input->{imgfile} = $2;
	} elsif ($input->{type} eq "xz") {
		# process xz compressed files
		if ($input->{path} =~ /^.*\/([^\/]*\.img)\.xz/) {
			$input->{imgfile} = $1;
		}
		my @xz_out = cmd2str("xz - list contents", prog("xz"), "--robot", "--list", $input->{path});
		chomp @xz_out;
		foreach my $xz_line (@xz_out) {
			if ($xz_line =~ /^file\s+\d+\s+\d+\s+\d+\s+(\d+)/) {
				$input->{size} = $1;
				last;
			}
		}
	}
}

# collect output device info
sub collect_device_info
{
	my $output = State::output();

	# check that device exists
	if (! -e $output->{path}) {
		State->error("output device ".$output->{path}." does not exist");
	}
	if (! -b $output->{path}) {
		State->error("output device ".$output->{path}." is not a block device");
	}

	# check block device parameters

	# load block device info into %output
	blkparam(@blkdev_params);
	if ($output->{mountpoint} ne "") {
		State->error("output device is mounted - this operation would erase it");
	}
	if ($output->{fstype} eq "swap") {
		State->error("output device is a swap device - this operation would erase it");
	}
	if ($output->{type} eq "part") {
		State->error("output device is a partition - Raspberry Pi flash needs whole SD device");
	}

	# check for SD/MMC card via USB or PCI bus interfaces
	if (!is_sd()) {
		State->error("output device is not an SD card - this operation would erase it");
	}
}

# blkparam function: get device information with lsblk command
# usage: blkparam(\%output, param-name, ...)
#   output: reference to hash with output device parameter strings
#   param-name: list of parameter names to read into output hash
sub blkparam
{
	# use State::output device unless another hash is provided
	my $blkdev;
	if (ref($_[0]) eq "HASH") {
		$blkdev = shift @_;
	} else {
		$blkdev = State::output();
	}

	# get the device's path
	# throw an exception if the device's hash data doesn't have it
	if (!exists $blkdev->{path}) {
		State::error("blkparam: device hash does not contain path to device");
	}
	my $path = $blkdev->{path};

	# loop through the requested parameters and get each one for the device with lsblk
	foreach my $paramname (@_) {
		if (exists $blkdev->{lc $paramname}) {
			# skip names of existing data to avoid overwriting
			say STDERR "blkparam(): skipped collection of parameter $paramname to avoid overwriting existing data";
			next;
		}
		my $value = cmd2str("lsblk lookup of $paramname", prog("lsblk"), "--bytes", "--nodeps", "--noheadings",
			"--output", $paramname, $path);
		if ($? == -1) {
			State->error("blkparam($paramname): failed to execute lsblk: $!");
		} elsif ($? & 127) {
			State->error(sprintf "blkparam($paramname): lsblk died with signal %d, %s coredump",
				($? & 127),  ($? & 128) ? 'with' : 'without');
		} elsif ($? != 0) {
			State->error(sprintf "blkparam($paramname): lsblk exited with value %d", $? >> 8);
		}
		$value =~ s/^\s*//; # remove leading whitespace
		$value =~ s/\s*$//; # remove trailing whitespace
		$blkdev->{lc $paramname} = $value;
	}
}

# print numbers with readable suffixes for megabytes, gigabytes, terabytes, etc
# handle more prefixes than currently needed for extra scalability to keep up with Moore's Law for a while
sub num_readable
{
	my $num = shift;
	my @suffixes = qw(bytes KB MB GB TB PB EB ZB);
	my $magnitude = int(log($num)/log(1024));
	if ($magnitude > $#suffixes) {
		$magnitude = $#suffixes;
	}
	my $num_base = $num/(1024**($magnitude));
	return sprintf "%4.2f%s", $num_base, $suffixes[$magnitude];
}

# generate random hex digits
sub random_hex
{
	my $length = shift;
	my $hex = "";
	while ($length > 0) {
		my $chunk = ($length > 4) ? 4 : $length;
		$length -= $chunk;
		$hex .= sprintf "%0*x", $chunk, int(rand(16**$chunk));
	}
	return $hex;
}

# generate a random UUID
# 128 bits/32 hexadecimal digits, used to set a probably-unique UUID on an ext2/3/4 filesystem we created
sub random_uuid
{
	my $uuid;

	# start with our own contrived prefix for our UUIDs
	$uuid .= "314decaf-"; # "314" first digits of pi (as in RasPi), and "decaf" among few words from hex digits

	# next 4 digits are from lower 4 hex digits of current time (rolls over every 18 days)
	$uuid .= sprintf "%04x-", (time & 0xffff);

	# next 4 digits are the UUID format version (4 for random) and 3 random hex digits
	$uuid .= "4".random_hex(3)."-";

	# next 4 digits are a UUID variant digit and 3 random hex digits
	$uuid .= (sprintf "%x", 8+int(rand(4))).random_hex(3)."-";
	
	# conclude with 8 random hex digits
	$uuid .= random_hex(12);

	return $uuid;
}

# generate a random label string
# 11 characters, used to set a probably-unique label on a VFAT/ExFAT filesystem we created
sub random_label
{
	my $label = "RPI";
	for (my $i=0; $i<8; $i++) {
		my $num = int(rand(36));
		if ($num <= 9) {
			$label .= chr(ord('0')+$num);
		} else {
			$label .= chr(ord('A')+$num-10);
		}
	}
	return $label;
}

# check if a device is an SD card
sub is_sd
{
	# use State::output device unless another hash is provided
	my $blkdev;
	if (ref($_[0]) eq "HASH") {
		$blkdev = shift @_;
	} else {
		$blkdev = State::output();
	}

	# check for SD/MMC card via USB or PCI bus interfaces
	if ($blkdev->{model} eq "SD/MMC") {
		# detected SD card via USB adapter
		verbose() and say "output device ".$blkdev->{path}." is an SD card via USB adapter";
		return 1;
	}

	# check if the SD card driver operates this device
	my $found_mmc = 0;
	my $found_usb = 0;
	my @subsystems = split /:/, $blkdev->{subsystems};
	foreach my $subsystem (@subsystems) {
		if ($subsystem eq "mmc_host" or $subsystem eq "mmc") {
			$found_mmc = 1;
		}
		if ($subsystem eq "usb") {
			$found_usb = 1;
		}
	}
	if ($found_mmc) {
		# verify that the MMC device is actually an SD card
		my $sysfs_devtype_path = "/sys/block/".base($blkdev->{path})."/device/type";
		if (! -f $sysfs_devtype_path) {
			State->error("cannot find output device ".$blkdev->{path}." type - Linux kernel ".State::system("release")." may be too old");
		}
		my $sysfs_devtype = slurp($sysfs_devtype_path);
		verbose() and say "output device ".$blkdev->{path}." is a $sysfs_devtype";
		if ($sysfs_devtype eq "SD") {
			return 1;
		}
	}

	# allow USB writable/hotplug/removable drives with physical sector size 512
	# this is imprecise because some other non-SD flash devices will be accepted as SD
	# it will still avoid allowing hard drives to be erased
	if ($found_usb) {
		if($blkdev->{ro}==0 and $blkdev->{rm}==1 and $blkdev->{hotplug}==1 and $blkdev->{"phy-sec"}==512) {
			verbose() and say "output device ".$blkdev->{path}." close enough: USB removable writable hotplug ps=512";
			return 1;
		}
	}
	
	verbose() and say "output device ".$blkdev->{path}." rejected as SD card";
	return 0;
}

# flash the output device from the input file
sub flash_device
{
	# flash the device
	if (State::has_input("imgfile")) {
		# if we know an embedded image file name, use it in the start message
		say "flashing ".State::input("path")." / ".State::input("imgfile")." -> ".State::output("path");
	} else {
		# print a start message with source and destination
		say "flashing ".State::input("path")." -> ".State::output("path");
	}
	say "wait for it to finish - this takes a while, progress not always indicated";
	if (State::input("type") eq "img") {
		cmd("dd flash", prog("sudo")." ".prog("dd")." bs=4M if=\"".State::input("path")."\" of=\""
			.State::output("path")."\" status=progress" );
	} elsif (State::input("type") eq "zip") {
		if (State::has_input("NOOBS")) {
			# format SD and copy NOOBS archive to it
			my $label = random_label();
			State::output("label", $label);
			my $fstype = State::system("primary_fs");
			if ($fstype ne "vfat") {
				State->error("NOOBS requires VFAT filesystem, not in this kernel - do you need to load a module?");
			}
			say "formatting $fstype filesystem for Raspberry Pi NOOBS system...";
			cmd("write partition table", prog("echo"), "type=c", "|", prog("sudo"), prog("sfdisk"),
				State::output("path"));
			my @partitions = grep {/part\s*$/} cmd2str("lsblk - find partitions", prog("lsblk"), "--list",
				State::output("path"));
			$partitions[0] =~ /^([^\s]+)\s/;
			my $partition = "/dev/".$1;
			cmd("format sd card", prog("sudo"), prog("mkfs.$fstype"), "-n", $label, $partition);
			my $mntdir = State::system("media_dir")."/piflash/sdcard";
			cmd("reread partition table", prog("sudo"), prog("blockdev"), "--rereadpt", State::output("path"));
			cmd("create mount point", prog("sudo"), prog("mkdir"), "-p", $mntdir );
			cmd("mount SD card", prog("sudo"), prog("mount"), "-t", $fstype, "LABEL=$label", $mntdir);
			cmd("unzip NOOBS contents", prog("sudo"), prog("unzip"), "-d", $mntdir, State::input("path"));
			cmd("unmount SD card", prog("sudo"), prog("umount"), $mntdir);
		} else {
			# flash zip archive to SD
			cmd("unzip/dd flash", prog("unzip")." -p \"".State::input("path")."\" \"".State::input("imgfile")
				."\" | ".prog("sudo")." ".prog("dd")." bs=4M of=\"".State::output("path")."\" status=progress");
		}
	} elsif (State::input("type") eq "gz") {
		# flash gzip-compressed image file to SD
		cmd("gunzip/dd flash", prog("gunzip")." --stdout \"".State::input("path")."\" | "
			.prog("sudo")." ".prog("dd")." bs=4M of=\"".State::output("path")."\" status=progress");
	} elsif (State::input("type") eq "xz") {
		# flash xz-compressed image file to SD
		cmd("xz/dd flash", prog("xz")." --decompress --stdout \"".State::input("path")."\" | "
			.prog("sudo")." ".prog("dd")." bs=4M of=\"".State::output("path")."\" status=progress");
	}
	say "wait for it to finish - synchronizing buffers";
	cmd("sync", prog("sync"));
	say "done - it is safe to remove the SD card";
}

# search for and print names of SD card devices
sub sd_search
{
	# add block devices to system info
	my $system = State::system();
	$system->{blkdev} = {};

	# loop through available devices - collect info and print list of available SD cards
	my @blkdev = cmd2str("lsblk - find block devices", prog("lsblk"), "--nodeps", "--noheadings", "--list",
		"--output", "NAME");
	my @sdcard;
	foreach my $blkdevname (@blkdev) {
		$system->{blkdev}{$blkdevname} = {};
		my $blkdev = $system->{blkdev}{$blkdevname};
		$blkdev->{path} = "/dev/$blkdevname";
		blkparam($blkdev, @blkdev_params);
		if (is_sd($blkdev)) {
			push @sdcard, $blkdev->{path};
		}
	}

	# print results of SD search
	if (scalar @sdcard == 0) {
		say "no SD cards found on system";
	} else {
		say "SD cards found: ".join(" ", @sdcard);
	}
}

# main routine
sub main
{
	# initialize program state storage
	State->init("system", "input", "output", "option", "log");

	# collect and validate command-line arguments
	do { GetOptions (State::option(), "verbose", "sdsearch"); };
	if ($@) {
		# in case of failure, add state info if verbose mode is set
		State->error($@);
	}
	if (($#ARGV != 1) and (!State::has_option("sdsearch"))) {
		usage();
	}

	# collect system info: kernel specs and locations of needed programs
	collect_system_info();

	# if --SDsearch option was selected, search for SD cards and exit
	if (State::has_option("sdsearch")) {
		# SDsearch mode: print list of SD card devices and exit
		sd_search();
		return;
	}

	# set input and output paths
	State::input("path", $ARGV[0]);
	State::output("path", $ARGV[1]);
	say "requested to flash ".State::input("path")." to ".State::output("path");
	say "output device ".State::output("path")." will be erased";

	# check the input file
	collect_file_info();
	
	# check the output device
	collect_device_info();

	# check input file and output device sizes
	if (State::input("size") > State::output("size")) {
		State->error("output device not large enough for this image - currently have: "
			.num_readable(State::output("size")).", minimum size: ".num_readable(State::input("size")));
	}
	# check if SD card is recommended 8GB - check for 6GB since it isn't a hard limit
	if (State::has_input("NOOBS") and State::output("size") < 6*1024*1024*1024) {
		State->error("NOOBS images want 8GB SD card - currently have: ".num_readable(State::output("size")));
	}

	# test access to root privilege
	# sudo should be configured to not prompt for a password again on this session for some minutes
	say "verify sudo access";
	do { cmd("sudo test", prog("sudo"), prog("true")); };
	if ($@) {
		# in case of failure, report that root privilege is required
		State->error("root privileges required to run this script");
	}

	# flash the device
	flash_device();
}

# run main routine and catch exceptions
local $@; # avoid interference from anything that modifies global $@
do { main(); };

# catch any exceptions thrown in main routine
if (my $exception = $@) {
	if (ref $exception) {
		# exception is an object - try common output functions in case they include more details
		# these are not generated by this program - but if another module surprises us, try to handle it gracefully
		if ($exception->can('as_string')) {
			# typical of Exception::Class derivative classes
			State->error("[".(ref $exception)."]: ".$exception->as_string());
		}
		if ($exception->can('to_string')) {
			# typical of Exception::Base derivative classes
			State->error("[".(ref $exception)."]: ".$exception->to_string());
		}
		# if exception object was not handled, fall through and print whatever it says as if it's a string
	}

	# print exception as a plain string
	# don't run this through State->error() because it probably already came from there
	say STDERR "$0 failed: $@";
	return 1;
} else {
	if (verbose()) {
		say "Program state dump...\n".State::odump($State::state,0);
	}
}

exit 0;
